;Develop an assembly language program to reverse a given string and verify whether it is a palindrome or not. Display the appropriate message.
DISPLAY MACRO MSG			            ;MACRO TO DISPLAY A STRING.
                  LEA DX,MSG			            ; STARTING ADDRESS OF THE STRING TO BE DISPLAYED IS LOADED IN DX
                  MOV AH,09H			            ; FUNCTION TO DISPLAY STRING UNDER INT21H
                  INT 21H
ENDM

DATA SEGMENT
            STR  DB  ‘RACECAR’		            ;STRING IS STORED IN LOCATION STR OF DATA SEGMENT
            LEN DW  LEN-STR		            ;IN LOCATION LEN THE LENGTH OF THE STRING GETS STORED
            REV DB LEN-STR DUP(0)		            ;REV USED TO HOLD REVERSE STRING.INITIALIZED TO LEN-STR ZEROS
            MSG1 DB 'STRING IS PALINDROME$'	            ;MESSAGE TO BE DISPLAYED IF STRING IS PALINDROME
            MSG2 DB 'STRING IS NOT PALINDROME$'    ;MESSAGE TO BE DISPLAYED IF STRING IS NOT A PALINDROME
DATA ENDS

ASSUME CS:CODE, DS:DATA

CODE SEGMENT
START:	 MOV AX,DATA	;LOAD THE DATA SEGMENT BASE ADDRESS INTO DS REGISTER USING AX. DS AND ES 
                            MOV DS,AX	;ARE LOADED WITH SAME BASE ADDRESS TO GET OVERLAPPING DS & ES. THIS HELPS IN
                            MOV ES,AX	;USING STRING INSTRUCTIONS WITH SI FOR SOURCE IN DS &  DI FOR DESTINATION IN ES
                            LEA SI,LEN-1	;SET SI TO END OF STRING & DI TO BEGINNING OF REV.TO REVERSE THE STRING BY 
                            LEA DI,REV	;COPYING THE BYTE FROM SOURCE TO DESTINATION TO OBTAIN REVERSED STRING
                            MOV CX,LEN 	;SET LENGTH OF STRING IN CX
BACK:	 MOV AL,[SI]	;COPY BYTE FROM SOURCE(STR) TO TEMPORARY LOCATION AL
                            MOV [DI],AL	;COPY THE BYTE FROM TEMPORARY LOCATION AL TO DESTINATION(REV)
                            DEC SI		;UPDATE SOURCE POINTER
                            INC DI		;UPDATE DESTINATION POINTER
                            LOOP BACK	;REPEAT UNTIL CX BECOMES 0 i.e ENTIRE STRING IS REVERSED
                            CLD		;CLEAR DIRECTION FLAG TO SET SI &DI FOR AUTOINCREMENT FOR STRING OPERATION
                            LEA SI,STR	;SET SOURCE POINTER SI TO STR
                            LEA DI,REV	;SET DESTINATION POINTER DI TO REV
                            MOV CX,LEN	;SET LENGTH OF STRING AS COUNT IN CX
                            REPE CMPSB	;REPEATEDLY CHECK IF BYTE IN STR AND REV ARE EQUAL & REPEAT COMPARISON  
                            JE PALIN		;UNTIL BYTES ARE EQUAL OR CX BECOMES 0. THIS DECIDES VALUE OF ZF.(E=1, NE=0) 
                            DISPLAY MSG2	;IF NOT EQUAL LOOP BREAKS AND ZF=0, & DISPLAY MESSAGE2
                            JMP QUIT	;JUMP TO LABEL THAT EXECUTES CODE TO EXIT PROGRAM
PALIN:	 DISPLAY MSG1	;IF STR & REV ARE EQUAL UNTIL CX BECOMES 0, THEN ZF=1 & DISPLAY MESSAGE1
QUIT:	 MOV AH,4CH	;FUNCTION TO EXIT PROGRAM UNDER INT 21H
                            INT 21H
CODE ENDS
END START
